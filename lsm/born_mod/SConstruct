from rsf.proj import *
from math import pi as PI
from math import sqrt

# get enviroment datapath (or choose datapath)
from os import environ as osenv
dpath=osenv.get('DATAPATH')
#dpath=/home/

#-------------------------------------------------------------
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

## Make homogeneous model
def make_homog_model(par,mag,model,dpath):
    n1 = par['nz']
    n2 = par['nx']
    d1 = par['d1']
    d2 = par['d2']
    Flow(model, None, '''
    spike n1=%d n2=%d d1=%g d2=%g mag=%g datapath=%s
          label1=Depth label2=Distance unit1=m unit2=m
    '''
    %(n1,n2,d1,d2,mag,dpath))

'''
m: array > magnitudes
k: array of tuples > beggining points
l: array of tuples > ending points
'''
def make_spike_model(par,m,k,l,model,dpath):

    n1 = par['nz']
    n2 = par['nx']
    d1 = par['d1']
    d2 = par['d2']

    nsp = len(m)
    mag = ','.join(str(e)     for e in m) 
    k1  = ','.join(str(e[0])  for e in k)
    k2  = ','.join(str(e[1])  for e in k)
    l1  = ','.join(str(e[0])  for e in l)
    l2  = ','.join(str(e[1])  for e in l)

    Flow(model, None,
    '''
    spike n1=%d n2=%d d1=%g d2=%g mag=%s k1=%s k2=%s l1=%s l2=%s nsp=%d datapath=%s
          label1=Depth label2=Distance unit1=m unit2=m
    '''
    %(n1,n2,d1,d2,mag,k1,k2,l1,l2,nsp,dpath))

# create ricker wavelet
def create_ricker(wav, par,dl,deriv, **kwargs):
    par['kt']=dl
    par['da']=PI*par['fpeak']
    par['da2']=par['da']*par['da']
    if   (deriv == -2):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d |
                sfmath output="-(0.5/(%(da2)f))*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == -1):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="(x1-%(kt)f)*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0.5 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                halfint inv=y | transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 1 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( -6 + 4*%(da2)f*(x1-%(kt)f)^2 )*
                               (x1-%(kt)f)*%(da2)f *
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    else:
        print("Derivative order not available!")


#plot signal and its spectrum (1d only)
def plot_sig_spec(sig, fcut, transpose, **kwargs):
    if transpose:
        ssig='transp-'+sig
        Flow(ssig,  sig, "transp plane=12")
    else:
        ssig=sig

    Flow('spec-'+ssig, ssig,
         "spectra|put label1='Frequency' title='Spectrum'  ")

    Plot('plot-spec-'+ssig, 'spec-'+ssig,
         "window max1=%f |graph"%(fcut))

    Plot('plot-'+ssig, ssig, "put title='Signature' | graph")

    Result('plot-sig+spec-'+ssig,
           ['plot-'+ssig, 'plot-spec-'+ssig],
           'SideBySideIso')

#create a horizontal line of receivers
def rec_hline(rec, oor, nr, dr, zr):
    Flow('tmp-x-'+rec, None,
         "math n1=%d d1=%f o1=%f output='x1'"%(nr, dr, oor))

    Flow('tmp-z-'+rec, None,
         "math n1=%d d1=%f o1=%f output='%f'"%(nr, dr, oor, zr))

    Flow(rec, ['tmp-x-'+rec,'tmp-z-'+rec],
         """cat axis=2 ${SOURCES[1]} space=n|transp|
            put label1="" unit1="" label2="" unit2="" """)

#create location files file for a point source
def point_src(src, xsrc, zsrc):
    Flow(src, None,
         "spike nsp=2 mag=%f,%f n1=2 k1=1,2"%(xsrc,zsrc))

#acoustic modeling
def born_modeling(sismo, bsnap, ssnap, wav, sou, rec, vel, den, ref, par, **kwargs):
    Flow([sismo, bsnap, ssnap], [wav, vel, den, ref, rec, sou],
         """lwefd2d
            dabc=y verb=y snap=y fsrf=n cden=y
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            vel=${SOURCES[1]} den=${SOURCES[2]} ref=${SOURCES[3]}
            rec=${SOURCES[4]} sou=${SOURCES[5]}
            wfl=${TARGETS[1]} liw=${TARGETS[2]}"""%(par))

#plot snapshot
def snap_plot(snap, perc=99., **kwargs):
    Result('plot-'+snap, snap,
           ''' put label1='Depth' label2='Distance'
               unit1='m' unit2='m' title="%s" |
               grey scalebar=y gainpanel=a pclip=%g'''%(snap,perc))

#plot seismogram (shot)
def sismo_plot(sismo, perc):
    Result('plot-'+sismo, sismo,
           '''transp plane=23 | transp plane=12 |put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(sismo,perc))

#plot model
def model_plot(model,title,bias=1500.,minval=0.):
    Result('plot-'+model,model,
           ''' grey pclip=100 gainpanel=e scalebar=y color=j
               allpos=n title=%s bias=%f minval=%f '''%(title,bias,minval))

## model parameters ##

# get model from command line
model = str(ARGUMENTS.get('model','model')) # model properties

if model == 'not-default':
    modpar=dict(vp=2745.0,refl=1008.0)
else:
    modpar=dict(vp=2000.0,refl=1000.0)

# get parameters from command line (overrides model properties)
modpar['vp']  = float(ARGUMENTS.get('vp', modpar['vp']))
modpar['refl'] = float(ARGUMENTS.get('refl', modpar['refl']))

print('model parameters: ',modpar)

# modeling parameters
par=dict(
    ot=0.0,
    nt=3000,
    dt=0.001,  # 1e-3
    nx=400,
    nz=400,
    jsnap=200,
    jdata=1,
    nb=200,
    fpeak=12.,
    o1=0.0,
    o2=0.0,
    d1=10.,
    d2=10.,
    srad=10,   # smooth radius
    nrec=401,  # number of receivers
    dr=10.,    # receiver interval (m)
    zr=10.,    # receiver depth (m)
    zsrc=20.,  # source depth (m)
    dshot=10., # shot interval (m)
    )
dl=1.5*sqrt(6)/PI/par['fpeak']

suffix='_NZ'+str(par['nz'])+'_NX'+str(par['nx'])

# make homogeneous models
vp='vp_'+model+suffix
rho='rho_'+model+suffix
refl='refl_'+model+suffix

make_homog_model(par, modpar['vp'],vp,dpath)
make_homog_model(par, 1.0,rho,dpath)

# make spike models
m = [0.0, 1.0, 1.0]
s = 3
k = [(1,1),                 (par['nz']/2-s,par['nz']/4-s), (par['nz']/2-s,3*par['nz']/4-s)]
l = [(par['nz'],par['nx']), (par['nz']/2+s,par['nz']/4+s), (par['nz']/2+s,3*par['nz']/4+s)]
make_spike_model(par,m,k,l,refl,dpath)

# model plot
model_plot(vp, "Velocity", 2744.,2744.)
model_plot(refl, "Reflectivity",1.1,1.0)

## finite difference modeling
start  = int(ARGUMENTS.get('start_shot', '1')) # start shot
end    = int(ARGUMENTS.get('end_shot', '1')) # end shot
offset = float(ARGUMENTS.get('off', '2000.0'))
nexp=end-start+1

#strings to concatenate data
all_wavfile=''
all_sfile=''
all_rfile=''
all_fshot=''

#shot position loop [start, end]
for j in range(start, end+1):

    # source position
    xsrc = offset + (j-1)*par['dshot']

    #receiver line
    rfile='receivers_'+str(j)
    all_rfile=all_rfile+rfile+' '

    oor=0.

    rec_hline(rfile, oor, par['nrec'],
              par['dr'], par['zr'])

    #create wavelets
    wavfile='wavelet_'+str(j)
    all_wavfile=all_wavfile+wavfile+' '

    create_ricker(wavfile, par,dl,0.5)
    #create_src(wavfile, par,dl, False)

    plot_sig_spec(wavfile, 60, True)

    # create sources positions
    sfile='source_'+str(j)
    all_sfile=all_sfile+sfile+' '

    point_src(sfile, xsrc, par['zsrc'])


    # creating registered data: shot-gather
    fshot='shot-'+model+'-'+str(j)
    all_fshot=all_fshot+fshot+' '

    bwfshot='bsnap'+fshot
    swfshot='ssnap'+fshot
    born_modeling(fshot, bwfshot, swfshot, wavfile,
                  sfile, rfile, vp, rho, refl, par)

    # plotting registered data
    #snap_plot(bwfshot,99.)
    snap_plot(swfshot,90.)
    #sismo_plot(fshot,99)

# concatenate data and store permanently

dpath=""

# Flow('shot_'+model,all_fshot,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('receivers',all_rfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('wavelet',all_wavfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('sources',all_sfile,'''cat  ${SOURCES[1:%d]} axis=2 |
#         sfput n2=1 d2=1 o2=o
#               n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('mask_'+model,'temp_mask_'+model, ''' cp datapath=%s '''%(dpath))

# Flow(vifile,'temp_'+vifile, ''' cp datapath=%s '''%(dpath))

End()
