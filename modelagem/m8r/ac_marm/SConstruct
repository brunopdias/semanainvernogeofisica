from rsf.proj import *
from math import pi as PI
from math import sqrt

# get enviroment datapath (or choose datapath)
from os import environ as osenv
dpath=osenv.get('DATAPATH')
#dpath=/home/

#-------------------------------------------------------------
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

# create ricker wavelet
def create_ricker(wav, par,dl,deriv, **kwargs):
    par['kt']=dl
    par['da']=PI*par['fpeak']
    par['da2']=par['da']*par['da']
    if   (deriv == -2):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d |
                sfmath output="-(0.5/(%(da2)f))*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == -1):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="(x1-%(kt)f)*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 1 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( -6 + 4*%(da2)f*(x1-%(kt)f)^2 )*
                               (x1-%(kt)f)*%(da2)f *
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    else:
        print("Derivative order not available!")


#plot signal and its spectrum (1d only)
def plot_sig_spec(sig, fcut, transpose, **kwargs):
    if transpose:
        ssig='transp-'+sig
        Flow(ssig,  sig, "transp plane=12")
    else:
        ssig=sig

    Flow('spec-'+ssig, ssig,
         "spectra|put label1='Frequency' title='Spectrum'  ")

    Plot('plot-spec-'+ssig, 'spec-'+ssig,
         "window max1=%f |graph"%(fcut))

    Plot('plot-'+ssig, ssig, "put title='Signature' | graph")

    Result('plot-sig+spec-'+ssig,
           ['plot-'+ssig, 'plot-spec-'+ssig],
           'SideBySideIso')

#create a horizontal line of receivers
def rec_hline(rec, oor, nr, dr, zr):
    Flow('tmp-x-'+rec, None,
         "math n1=%d d1=%f o1=%f output='x1'"%(nr, dr, oor))

    Flow('tmp-z-'+rec, None,
         "math n1=%d d1=%f o1=%f output='%f'"%(nr, dr, oor, zr))

    Flow(rec, ['tmp-x-'+rec,'tmp-z-'+rec],
         """cat axis=2 ${SOURCES[1]} space=n|transp|
            put label1="" unit1="" label2="" unit2="" """)

#create location files file for a point source
def point_src(src, xsrc, zsrc):
    Flow(src, None,
         "spike nsp=2 mag=%f,%f n1=2 k1=1,2"%(xsrc,zsrc))

#acoustic modeling
def modeling(sismo, snap, wav, sou, rec, vel, den, par, **kwargs):

    Flow([sismo, snap], [wav, vel, den,rec, sou],
         """awefd2d
            dabc=y verb=y snap=y fsrf=n cden=y
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            vel=${SOURCES[1]} den=${SOURCES[2]}
            rec=${SOURCES[3]} sou=${SOURCES[4]}
            wfl=${TARGETS[1]}"""%(par))

#plot snapshot
def snap_plot(snap, **kwargs):

    Result('plot-'+snap, snap,
           ''' put label1='Depth' label2='Distance'
               unit1='m' unit2='m' title="%s" |
               grey scalebar=y gainpanel=a'''%(snap))

#plot seismogram (shot)
def sismo_plot(sismo, perc):

    Result('plot-'+sismo, sismo,
           '''transp plane=12 |put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(sismo,perc))

#plot model
def model_plot(model,title,bias=1500.,minval=0.):
    Result('plot-'+model,model,
           ''' grey pclip=100 gainpanel=e scalebar=y color=j
               allpos=y title=%s bias=%f minval=%f '''%(title,bias,minval))

## model parameters ##

# Fetch Files from repository
model='marmvel'
Fetch('marmvel.hh',"marm")

# modeling parameters
par=dict(
    ot=0.0,
    nt=2000,
    dt=0.002,  # 1e-3
    nx=151,
    nz=461,
    jsnap=200,
    jdata=1,
    nb=100,
    fpeak=8.,
    o1=0.0,
    o2=0.0,
    d1=20.,
    d2=20.,
    srad=10,      # smooth radius
    nrec=460,     # number of receivers
    dr=20.,       # receiver interval (m)
    zr=20.,       # receiver depth (m)
    zsrc=20.,   # source depth (m)
    dshot=10.,    # shot interval (m)
    )
dl=1.5*sqrt(6)/PI/par['fpeak']


# Convert Files to RSF and update headers
Flow("marmvel",'marmvel.hh','''dd form=native |
    window j1=5 j2=5 | put
    label1=Depth label2=Distance unit1=m unit2=m
    d1=%(d1)g d2=%(d2)g''' % (par))

## make homogeneous models
vp=model
rho=model

# model plot
model_plot(vp,"Vp",1500.,1500.)

## finite difference modeling
start  = int(ARGUMENTS.get('start_shot', '1')) # start shot
end    = int(ARGUMENTS.get('end_shot', '1')) # end shot
offset = float(ARGUMENTS.get('off', '2560.0'))
nexp=end-start+1

#strings to concatenate data
all_wavfile=''
all_sfile=''
all_rfile=''
all_fshot=''

#shot position loop [start, end]
for j in range(start, end+1):

    # source position
    xsrc = offset + (j-1)*par['dshot']
    print(xsrc)

    #receiver line
    rfile='receivers_'+str(j)
    all_rfile=all_rfile+rfile+' '

    oor=0.

    rec_hline(rfile, oor, par['nrec'],
              par['dr'], par['zr'])

    #create wavelets
    wavfile='wavelet_'+str(j)
    all_wavfile=all_wavfile+wavfile+' '

    create_ricker(wavfile, par,dl,0)
    #create_src(wavfile, par,dl, False)

    plot_sig_spec(wavfile, 60, True)

    # create sources positions
    sfile='source_'+str(j)
    all_sfile=all_sfile+sfile+' '

    point_src(sfile, xsrc, par['zsrc'])

    # creating registered data: shot-gather
    fshot='shot-'+model+'-'+str(j)
    all_fshot=all_fshot+fshot+' '

    wfshot='snap'+fshot
    modeling(fshot,wfshot, wavfile, sfile, rfile, vp, rho, par)

    # plotting registered data
    snap_plot(wfshot)
    sismo_plot(fshot,99)

# concatenate data and store permanently

dpath=""

# Flow('shot_'+model,all_fshot,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('receivers',all_rfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('wavelet',all_wavfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('sources',all_sfile,'''cat  ${SOURCES[1:%d]} axis=2 |
#         sfput n2=1 d2=1 o2=o
#               n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('mask_'+model,'temp_mask_'+model, ''' cp datapath=%s '''%(dpath))

# Flow(vifile,'temp_'+vifile, ''' cp datapath=%s '''%(dpath))


End()
