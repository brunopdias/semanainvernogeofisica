from rsf.proj import *
from math import pi as PI
from math import sqrt

# get enviroment datapath (or choose datapath)
from os import environ as osenv
dpath=osenv.get('DATAPATH')
#dpath=/home/

#-------------------------------------------------------------
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

## Make homogeneous model

def make_homog_model(n1,n2,d1,d2,mag,model,dpath):
    Flow(model,None,
    ''' spike n1=%d n2=%d d1=%g d2=%g mag=%g datapath=%s '''%(n1,n2,d1,d2,mag,dpath))

## Make two layer model
### alternative interpolation method: sfremap1
def make_two_layer_model(layers,par,value,model,dpath):
    Flow(model,layers,
    ''' spline o1=%g d1=%g n1=%d |
     unif2 o1=%g d1=%g n1=%d v00=%s |
     dd form=native | smooth rect1=%d rect2=%d |
     put label1=%s label2=%s unit1=%s unit2=%s
     datapath=%s '''%(par['ox'],par['dx'],par['nx'],
                        par['oz'],par['dz'],par['nz'],value,
                        par['srad'],par['srad'],
                        par['lz'],par['lx'],par['uz'],par['ux'],
                        dpath))

## Build elastic parameters (c11,c33,c55,c13) from vp,vs,rho,eps e dlt

## generate c11 and c55 from vti anisotropic elastic model (vel,rho)
## c33 = vp^2 * rho
## c55 = vs^2 * rho

def make_cii_aniso(cii, vp, rho, dpath):
    Flow(cii, [vp,rho],
         ''' math rho=${SOURCES[1]} output="input^2 * rho" datapath=%s '''%(dpath))

# generate c11 from anisotropic elastic model (vp,rho,eps)
# c11 = vp^2 * rho * (1+eps)

def make_c11_aniso(c11, vp, rho, eps, dpath):
    Flow(c11, [vp,rho,eps],
         ''' math rho=${SOURCES[1]} eps=${SOURCES[2]}
             output="input^2 * rho * (1+2*eps)" datapath=%s '''%(dpath))

# generate c13 from anisotropic elastic model (vp,vs,rho,dlt)
# c13 = ( sqrt((vp^2 -vs^2)^2 + 2*dlt*vp^2(vp^2 -vs^2))-vs^2)*rho

def make_c13_aniso(c13, vp, vs, rho, dlt, dpath):
    Flow(c13, [vp,vs,rho,dlt],
         ''' math vs=${SOURCES[1]} rho=${SOURCES[2]} dlt=${SOURCES[3]}
             output="(sqrt( (input^2 - vs^2)^2 + 2*(dlt*input^2) *
             (input^2 -vs^2) )-vs^2) * rho" datapath=%s '''%(dpath))

# concatenate c11, c33, c13, c55 to make ccc tensor
def make_ccc(ccc,c11,c33,c55,c13, dpath):
    Flow(ccc,[c11,c33,c55,c13],
         'cat axis=3 space=n ${SOURCES[1:4]} | put d3=1 o3=0 datapath=%s'%(dpath))

# create ricker wavelet
def create_ricker(wav, par,dl,deriv, **kwargs):
    par['kt']=dl
    par['da']=PI*par['fpeak']
    par['da2']=par['da']*par['da']
    if   (deriv == -2):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d |
                sfmath output="-(0.5/(%(da2)f))*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == -1):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="(x1-%(kt)f)*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 1 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( -6 + 4*%(da2)f*(x1-%(kt)f)^2 )*
                               (x1-%(kt)f)*%(da2)f *
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    else:
        print("Derivative order not available!")


# create elastic tensor wavetet (concatenating txx, tzz wavelets)
def create_elastic_src(wav, wav_txx, wav_tzz):
    Flow(wav, [wav_txx, wav_tzz],
         ''' cat ${SOURCES[1]} | transp plane=23 ''')

#plot signal and its spectrum (1d only)
def plot_sig_spec(sig, fcut, transpose, **kwargs):
    if transpose:
        ssig='transp-'+sig
        Flow(ssig,  sig, "transp plane=12")
    else:
        ssig=sig

    Flow('spec-'+ssig, ssig,
         "spectra|put label1='Frequency' title='Spectrum'  ")

    Plot('plot-spec-'+ssig, 'spec-'+ssig,
         "window max1=%f |graph"%(fcut))

    Plot('plot-'+ssig, ssig, "put title='Signature' | graph")

    Result('plot-sig+spec-'+ssig,
           ['plot-'+ssig, 'plot-spec-'+ssig],
           'SideBySideIso')

#create a horizontal line of receivers
def rec_hline(rec, oor, nr, dr, zr):
    Flow('tmp-x-'+rec, None,
         "math n1=%d d1=%f o1=%f output='x1'"%(nr, dr, oor))

    Flow('tmp-z-'+rec, None,
         "math n1=%d d1=%f o1=%f output='%f'"%(nr, dr, oor, zr))

    Flow(rec, ['tmp-x-'+rec,'tmp-z-'+rec],
         """cat axis=2 ${SOURCES[1]} space=n|transp|
            put label1="" unit1="" label2="" unit2="" """)

#create location files file for a point source
def point_src(src, xsrc, zsrc):
    Flow(src, None,
         "spike nsp=2 mag=%f,%f n1=2 k1=1,2"%(xsrc,zsrc))

#elastic modeling
def modeling(sismo, snap, wav, sou, rec, ccc, den, par, **kwargs):

    Flow([sismo, snap], [wav, ccc, den,rec, sou],
         """ewefd2d
            dabc=y verb=y snap=y free=0 ssou=y opot=n isobc=n
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            ccc=${SOURCES[1]} den=${SOURCES[2]}
            rec=${SOURCES[3]} sou=${SOURCES[4]}
            wfl=${TARGETS[1]}"""%(par))

#plot snapshot
def snap_plot(snap, f4, **kwargs):

    Result('plot-'+snap, snap,
           ''' sftransp plane=34 memsize=4000 |
               window n4=1 f4=%d |
               put label1='Depth' label2='Distance'
               unit1='m' unit2='m' title="%s" |
               grey scalebar=y gainpanel=a'''%(f4, snap))

#plot seismogram (shot)
def sismo_plot(sismo, perc):

    Result('plot-'+sismo, sismo,
           '''transp plane=23 | transp plane=12 |put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(sismo,perc))

#plot model
def model_plot(model,title,bias=1500.):
    Result('plot-'+model,model,
           ''' grey pclip=100 gainpanel=e scalebar=y color=j
               allpos=y title=%s bias=%g '''%(title,bias))

## model parameters ##

# get model from command line
model = str(ARGUMENTS.get('model','iso-el')) # model properties

if model == 'iso-ac':
    modpar=dict(vp1=2500.0,vs1=0000.0,rho1=1010.0,eps1=0.000,dlt1=0.000,
                vp2=4000.0,vs2=0000.0,rho2=2000.0,eps2=0.000,dlt2=0.000)
elif model == 'iso-el':
    modpar=dict(vp1=2500.0,vs1=1000.0,rho1=1010.0,eps1=0.000,dlt1=0.000,
                vp2=4000.0,vs2=2000.0,rho2=2000.0,eps2=0.000,dlt2=0.000)
else:
    modpar=dict(vp1=2500.0,vs1=0000.0,rho1=1010.0,eps1=0.000,dlt1=0.000,
                vp2=4000.0,vs2=0000.0,rho2=2000.0,eps2=0.000,dlt2=0.000)

# get parameters from command line (overrides model properties)
modpar['vp1']  = float(ARGUMENTS.get('vp1', modpar['vp1']))
modpar['vs1']  = float(ARGUMENTS.get('vs1', modpar['vs1']))
modpar['rho1'] = float(ARGUMENTS.get('rho1', modpar['rho1']))
modpar['eps1'] = float(ARGUMENTS.get('eps1', modpar['eps1']))
modpar['dlt1'] = float(ARGUMENTS.get('dlt1', modpar['dlt1']))
modpar['vp2']  = float(ARGUMENTS.get('vp2', modpar['vp2']))
modpar['vs2']  = float(ARGUMENTS.get('vs2', modpar['vs2']))
modpar['rho2'] = float(ARGUMENTS.get('rho2', modpar['rho2']))
modpar['eps2'] = float(ARGUMENTS.get('eps2', modpar['eps2']))
modpar['dlt2'] = float(ARGUMENTS.get('dlt2', modpar['dlt2']))

# Values arrays
vpval= arr2str((0,modpar['vp1'],modpar['vp2']),',')
vsval= arr2str((0,modpar['vs1'],modpar['vs2']),',')
rhoval= arr2str((0,modpar['rho1'],modpar['rho2']),',')
epsval= arr2str((0,modpar['eps1'],modpar['eps2']),',')
dltval= arr2str((0,modpar['dlt1'],modpar['dlt2']),',')


print('model parameters: ',modpar)

# modeling parameters
par=dict(
    ot=0.0,
    nt=2000,
    dt=0.001,  # 1e-3
    nx=512,
    nz=512,
    jsnap=200,
    jdata=1,
    nb=100,
    fpeak=16.,
    oz=0.0,
    ox=0.0,
    dx=10.,
    dz=10.,
    olayer=0.,    # layer nodes origin
    dlayer=1280., # layer nodes spacing
    lz='Depth',
    lx='Distance',
    uz='m',
    ux='m',
    srad=5,      # smooth radius
    nrec=512,     # number of receivers
    dr=10.,       # receiver interval (m)
    zr=10.,       # receiver depth (m)
    zsrc=50.,   # source depth (m)
    dshot=10.,    # shot interval (m)
    )
dl=1.5*sqrt(6)/PI/par['fpeak']


# Create Layers
layers = ((0.01,0.01,0.01,0.01,0.01),
        (2000.,2000.,2000.,2000.,2000.))

n1 = len(layers[0])
n2 = len(layers)

layers1 = string.join(map(arr2str,layers),' ')

Flow('layers',None,
     '''
     echo %s
     n1=%g n2=%g o1=%g d1=%g d2=1 o2=0
     data_format=ascii_float in=$TARGET
     ''' % (layers1,n1,n2,par['olayer'],par['dlayer'] ))

# Create Layers
suffix='_NZ'+str(par['nz'])+'_NX'+str(par['nx'])

## make homogeneous models
vp='vp_'+model+suffix
vs='vs_'+model+suffix
rho='rho_'+model+suffix
eps='eps_'+model+suffix
dlt='del_'+model+suffix

make_two_layer_model('layers',par,vpval,vp,dpath)
make_two_layer_model('layers',par,vsval,vs,dpath)
make_two_layer_model('layers',par,rhoval,rho,dpath)
make_two_layer_model('layers',par,epsval,eps,dpath)
make_two_layer_model('layers',par,dltval,dlt,dpath)


## make elastic constants
c11='c11_'+model+suffix
c13='c13_'+model+suffix
c33='c33_'+model+suffix
c55='c55_'+model+suffix
ccc='ccc_'+model+suffix

make_c11_aniso(c11, vp, rho, eps, dpath)
make_cii_aniso(c33, vp, rho, dpath)
make_cii_aniso(c55, vs, rho, dpath)
make_c13_aniso(c13, vp, vs, rho, dlt, dpath)
make_ccc(ccc,c11,c33,c55,c13,dpath)


# model plot
model_plot(vp,"Vp",2500.)
model_plot(vs,"Vs",0.)

## finite difference modeling
start  = int(ARGUMENTS.get('start_shot', '1')) # start shot
end    = int(ARGUMENTS.get('end_shot', '1')) # end shot
offset = float(ARGUMENTS.get('off', '2560.0'))
nexp=end-start+1

#strings to concatenate data
all_wavfile=''
all_sfile=''
all_rfile=''
all_fshot=''

#shot position loop [start, end]
for j in range(start, end+1):

    # source position
    xsrc = offset + (j-1)*par['dshot']
    print(xsrc)

    #receiver line
    rfile='receivers_'+str(j)
    all_rfile=all_rfile+rfile+' '

    oor=0.

    rec_hline(rfile, oor, par['nrec'],
              par['dr'], par['zr'])

    #create wavelets
    wavfile='wavelet_'+str(j)
    all_wavfile=all_wavfile+wavfile+' '

    create_ricker(wavfile, par,dl,0)
    #create_src(wavfile, par,dl, False)

    #plot_sig_spec(wavfile, 60, True)

    elwavfile='elastic_'+wavfile

    create_elastic_src(elwavfile,wavfile,wavfile)

    # create sources positions
    sfile='source_'+str(j)
    all_sfile=all_sfile+sfile+' '

    point_src(sfile, xsrc, par['zsrc'])


    # creating registered data: shot-gather
    fshot='shot-'+model+'-'+str(j)
    all_fshot=all_fshot+fshot+' '

    wfshot='snap'+fshot
    modeling(fshot,wfshot, elwavfile, sfile, rfile, ccc, rho, par)

    # plotting registered data
    snap_plot(wfshot, 0)
    #sismo_plot(fshot,99)



# concatenate data and store permanently

dpath=""

# Flow('shot_'+model,all_fshot,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('receivers',all_rfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('wavelet',all_wavfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('sources',all_sfile,'''cat  ${SOURCES[1:%d]} axis=2 |
#         sfput n2=1 d2=1 o2=o
#               n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('mask_'+model,'temp_mask_'+model, ''' cp datapath=%s '''%(dpath))

# Flow(vifile,'temp_'+vifile, ''' cp datapath=%s '''%(dpath))


End()
