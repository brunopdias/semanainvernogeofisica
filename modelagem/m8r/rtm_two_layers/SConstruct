from rsf.proj import *
from math import pi as PI
from math import sqrt

# get enviroment datapath (or choose datapath)
from os import environ as osenv
dpath=osenv.get('DATAPATH')
#dpath=/home/


#-------------------------------------------------------------
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

## Make homogeneous model
def make_homog_model(n1,n2,d1,d2,mag,model,dpath):
    Flow(model,None, ''' spike n1=%d n2=%d d1=%g d2=%g mag=%g datapath=%s'''
    %(n1,n2,d1,d2,mag,dpath))

## Make reflector
def make_reflector(model,par):
    Flow(model,None,
         ''' spike n1=%(nz)d d1=%(dz)g label1="Depth" unit2="m"
                   n2=%(nx)d d2=%(dx)g label2="Distance" unit2="m"
                   mag=%(vel)g,500.  k1=1,%(k1)d l1=%(nz)d,%(k1)d nsp=2 ''' %(par))

## Make two layer model
def make_two_layer_model(layers,par,value,model,dpath):
    Flow(model,layers,
    ''' spline o1=%g d1=%g n1=%d |
     unif2 o1=%g d1=%g n1=%d v00=%s |
     dd form=native |
     put label1=%s label2=%s unit1=%s unit2=%s
     datapath=%s '''%(par['ox'],par['dx'],par['nx'],
                        par['oz'],par['dz'],par['nz'],value,
                        par['lz'],par['lx'],par['uz'],par['ux'],
                        dpath))

# create ricker wavelet
def create_ricker(wav, par,dl,deriv, **kwargs):
    par['kt']=dl
    par['da']=PI*par['fpeak']
    par['da2']=par['da']*par['da']
    if   (deriv == -2):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d |
                sfmath output="-(0.5/(%(da2)f))*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == -1):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="(x1-%(kt)f)*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 1 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( -6 + 4*%(da2)f*(x1-%(kt)f)^2 )*
                               (x1-%(kt)f)*%(da2)f *
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    else:
        print("Derivative order not available!")


#plot signal and its spectrum (1d only)
def plot_sig_spec(sig, fcut, transpose, **kwargs):
    if transpose:
        ssig='transp-'+sig
        Flow(ssig,  sig, "transp plane=12")
    else:
        ssig=sig

    Flow('spec-'+ssig, ssig,
         "spectra|put label1='Frequency' title='Spectrum'  ")

    Plot('plot-spec-'+ssig, 'spec-'+ssig,
         "window max1=%f |graph"%(fcut))

    Plot('plot-'+ssig, ssig, "put title='Signature' | graph")

    Result('plot-sig+spec-'+ssig,
           ['plot-'+ssig, 'plot-spec-'+ssig],
           'SideBySideIso')

#create a horizontal line of receivers
def rec_hline(rec, oor, nr, dr, zr):
    Flow('tmp-x-'+rec, None,
         "math n1=%d d1=%f o1=%f output='x1'"%(nr, dr, oor))

    Flow('tmp-z-'+rec, None,
         "math n1=%d d1=%f o1=%f output='%f'"%(nr, dr, oor, zr))

    Flow(rec, ['tmp-x-'+rec,'tmp-z-'+rec],
         """cat axis=2 ${SOURCES[1]} space=n|transp|
            put label1="" unit1="" label2="" unit2="" """)

#create location files file for a point source
def point_src(src, xsrc, zsrc):
    Flow(src, None,
         "spike nsp=2 mag=%f,%f n1=2 k1=1,2"%(xsrc,zsrc))

#acoustic modeling
def modeling(sismo, snap, wav, sou, rec, vel, den, par, **kwargs):

    Flow([sismo, snap], [wav, vel, den,rec, sou],
         """awefd2d
            dabc=y verb=y snap=y fsrf=n cden=y
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            vel=${SOURCES[1]} den=${SOURCES[2]}
            rec=${SOURCES[3]} sou=${SOURCES[4]}
            wfl=${TARGETS[1]}"""%(par))

#plot snapshot
def snap_plot(snap, **kwargs):
    Result('plot-'+snap, snap,
           ''' put label1='Depth' label2='Distance'
               unit1='m' unit2='m' title="%s" |
               grey scalebar=y gainpanel=a'''%(snap))

#plot seismogram (shot)
def sismo_plot(sismo, perc):
    Result('plot-'+sismo, sismo,
           '''transp plane=12 |put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(sismo,perc))

#plot image (migration)
def image_plot(image, perc):
    Result('plot-'+image, image,
           '''put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(image,perc))

#plot model
def model_plot(model,title,bias=1500.):
    Result('plot-'+model,model,
           ''' grey pclip=100 gainpanel=e scalebar=y color=j
               allpos=y title=%s bias=%g '''%(title,bias))

## model parameters ##

# get model from command line
model = str(ARGUMENTS.get('model','default')) # model properties

if model == 'not-default':
    modpar=dict(vp1=2500.0,rho1=1010.0,
                vp2=4000.0,rho2=2000.0)
else:
    modpar=dict(vp1=2500.0,rho1=1010.0,
                vp2=4000.0,rho2=2000.0)

# get parameters from command line (overrides model properties)
modpar['vp1']  = float(ARGUMENTS.get('vp1', modpar['vp1']))
modpar['rho1'] = float(ARGUMENTS.get('rho1', modpar['rho1']))
modpar['vp2']  = float(ARGUMENTS.get('vp2', modpar['vp2']))
modpar['rho2'] = float(ARGUMENTS.get('rho2', modpar['rho2']))

# Values arrays
vpval= arr2str((0,modpar['vp1'],modpar['vp2']),',')
rhoval= arr2str((0,modpar['rho1'],modpar['rho2']),',')

print('model parameters: ',modpar)

# modeling parameters
par=dict(
    ot=0.0,
    nt=1250,
    dt=0.002,  # 1e-3
    nx=256,
    nz=256,
    k1=128,
    vel=2500.,
    jsnap=1,
    jdata=1,
    nb=100,
    fpeak=8.,
    oz=0.0,
    ox=0.0,
    dx=20.,
    dz=20.,
    olayer=0.,    # layer nodes origin
    dlayer=1280., # layer nodes
    lz='Depth',
    lx='Distance',
    uz='m',
    ux='m',
    srad=10,      # smooth radius
    nrec=512,     # number of receivers
    dr=10.,       # receiver interval (m)
    zr=10.,       # receiver depth (m)
    zsrc=50.,   # source depth (m)
    dshot=10.,    # shot interval (m)
    nbuf=8,       # xcor buffer
    )
dl=1.5*sqrt(6)/PI/par['fpeak']


# Create Layers
layers = ((0.01,0.01,0.01,0.01,0.01),
        (2000.,2000.,1800.,2100.,2000.))

n1 = len(layers[0])
n2 = len(layers)

layers1 = string.join(map(arr2str,layers),' ')

Flow('layers',None,
     '''
     echo %s
     n1=%g n2=%g o1=%g d1=%g
     data_format=ascii_float in=$TARGET
     ''' % (layers1,n1,n2,par['olayer'],par['dlayer'] ))

# Create Layers
suffix='_NZ'+str(par['nz'])+'_NX'+str(par['nx'])

## make homogeneous models
vp='vp_'+model+suffix
rho='rho_'+model+suffix

make_two_layer_model('layers',par,vpval,vp,dpath)
make_two_layer_model('layers',par,rhoval,rho,dpath)

#make_reflector(vp,par)
#make_reflector(rho,par)

# model plot
model_plot(vp,"Vp",2500.)

## finite difference modeling
start  = int(ARGUMENTS.get('start_shot', '1')) # start shot
end    = int(ARGUMENTS.get('end_shot', '1')) # end shot
offset = float(ARGUMENTS.get('off', '2560.0'))
nexp=end-start+1

#strings to concatenate data
all_wavfile=''
all_sfile=''
all_rfile=''
all_fshot=''

#shot position loop [start, end]
for j in range(start, end+1):

    # source position
    xsrc = offset + (j-1)*par['dshot']
    print(xsrc)

    #receiver line
    rfile='receivers_'+str(j)
    all_rfile=all_rfile+rfile+' '

    oor=0.

    rec_hline(rfile, oor, par['nrec'],
              par['dr'], par['zr'])

    #create wavelets
    wavfile='wavelet_'+str(j)
    all_wavfile=all_wavfile+wavfile+' '

    create_ricker(wavfile, par,dl,0)
    #create_src(wavfile, par,dl, False)

    #plot_sig_spec(wavfile, 60, True)


    # create sources positions
    sfile='source_'+str(j)
    all_sfile=all_sfile+sfile+' '

    point_src(sfile, xsrc, par['zsrc'])


    # creating registered data: shot-gather
    fshot='shot-'+model+'-'+str(j)
    all_fshot=all_fshot+fshot+' '

    # source wavefield (z,x,t)
    wfshot='snap'+fshot
    modeling(fshot,wfshot, wavfile, sfile, rfile, vp, rho, par)

    sismo_plot(fshot,99.9)

    # reverse data
    rshot = 'r'+fshot
    Flow(rshot,fshot,'''transp plane=12 | put o2=%d |   mutter v0=3500. t0=0.75 |
    transp plane=12 | reverse which=2 opt=i verb=y  '''%(-offset))

    sismo_plot(rshot,99.9)

    # reverse in time source wavefield
    rfshot='r'+wfshot
    Flow(rfshot,wfshot,'''reverse which=4 opt=i verb=y memsize=200''')

    # adjoint (receiver) wavefield (z,x,t)
    afshot='a'+wfshot
    rout='rout-'+model+'-'+str(j)
    modeling(rout,afshot, rshot, rfile, rfile, vp, rho, par)

    # conventional (cross-correlation zero-lag) imaging condition
    imag='imagem-'+model+'-'+str(j)
    Flow(imag,[rfshot,afshot],
         'xcor2d uu=${SOURCES[1]} axis=3 verb=y nbuf=%(nbuf)d' % par)

    # plot image
    image_plot(imag,99.9)
    #snap_plot(wfshot)

# concatenate data and store permanently

dpath=""

# Flow('shot_'+model,all_fshot,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('receivers',all_rfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('wavelet',all_wavfile,'''cat  ${SOURCES[1:%d]} axis=3 |
#         sfput n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('sources',all_sfile,'''cat  ${SOURCES[1:%d]} axis=2 |
#         sfput n2=1 d2=1 o2=o
#               n3=%d d3=1 o3=o datapath=%s''' %(nexp,nexp,dpath))

# Flow('mask_'+model,'temp_mask_'+model, ''' cp datapath=%s '''%(dpath))

# Flow(vifile,'temp_'+vifile, ''' cp datapath=%s '''%(dpath))


End()
