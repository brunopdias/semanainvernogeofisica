from rsf.proj import *
from math import pi as PI
from math import sqrt

# get enviroment datapath (or choose datapath)
from os import environ as osenv
dpath=osenv.get('DATAPATH')
#dpath="/home/bruno/Dados/psf/"
#-------------------------------------------------------------
def arr2str(array,sep=' '):
    return string.join(map(str,array),sep)

## Make homogeneous model
def make_homog_model(model,n1,n2,d1,d2,mag,dpath):
    Flow(model,None, ''' spike n1=%d n2=%d d1=%g d2=%g mag=%g datapath=%s'''
    %(n1,n2,d1,d2,mag,dpath))

## Make spikes model
def make_spike_model(model,par):
    Flow(model,None, ''' spike n1=%(nz)d n2=%(nx)d d1=%(dz)g d2=%(dx)g
                               k1=%(k1)s k2=%(k2)s mag=%(mag)s nsp=%(nsp)d datapath=%(dpath)s '''%(par) )

## Make two layer model
def make_two_layer_model(layers,par,value,model,dpath):
    Flow(model,layers,
    ''' spline o1=%g d1=%g n1=%d |
     unif2 o1=%g d1=%g n1=%d v00=%s |
     dd form=native |
     put label1=%s label2=%s unit1=%s unit2=%s
     datapath=%s '''%(par['ox'],par['dx'],par['nx'],
                        par['oz'],par['dz'],par['nz'],value,
                        par['lz'],par['lx'],par['uz'],par['ux'],
                        dpath))

# create ricker wavelet
def create_ricker(wav, par,dl,deriv, **kwargs):
    par['kt']=dl
    par['da']=PI*par['fpeak']
    par['da2']=par['da']*par['da']
    if   (deriv == -2):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d |
                sfmath output="-(0.5/(%(da2)f))*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == -1):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="(x1-%(kt)f)*exp(-%(da2)f*(x1-%(kt)f)^2)" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 0 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( 1 - 2*(%(da2)f*(x1-%(kt)f)^2) )*
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    elif (deriv == 1 ):
        Flow(wav, None,
             '''spike nsp=1 mag=0 k1=0
                o1=%(ot)f d1=%(dt)f n1=%(nt)d|
                sfmath output="( -6 + 4*%(da2)f*(x1-%(kt)f)^2 )*
                               (x1-%(kt)f)*%(da2)f *
                               exp( -%(da2)f*(x1-%(kt)f)^2 )" |
                transp plane=12|
                put label1="t" '''%(par))
    else:
        print "Derivative order not available!"


#plot signal and its spectrum (1d only)
def plot_sig_spec(sig, fcut, transpose, **kwargs):
    if transpose:
        ssig='transp-'+sig
        Flow(ssig,  sig, "transp plane=12")
    else:
        ssig=sig

    Flow('spec-'+ssig, ssig,
         "spectra|put label1='Frequency' title='Spectrum'  ")

    Plot('plot-spec-'+ssig, 'spec-'+ssig,
         "window max1=%f |graph"%(fcut))

    Plot('plot-'+ssig, ssig, "put title='Signature' | graph")

    Result('plot-sig+spec-'+ssig,
           ['plot-'+ssig, 'plot-spec-'+ssig],
           'SideBySideIso')

#create a horizontal line of receivers
def rec_hline(rec, oor, nr, dr, zr):
    Flow('tmp-x-'+rec, None,
         "math n1=%d d1=%f o1=%f output='x1'"%(nr, dr, oor))

    Flow('tmp-z-'+rec, None,
         "math n1=%d d1=%f o1=%f output='%f'"%(nr, dr, oor, zr))

    Flow(rec, ['tmp-x-'+rec,'tmp-z-'+rec],
         """cat axis=2 ${SOURCES[1]} space=n|transp|
            put label1="" unit1="" label2="" unit2="" """)

#create location files file for a point source
def point_src(src, xsrc, zsrc):
    Flow(src, None,
         "spike nsp=2 mag=%f,%f n1=2 k1=1,2"%(xsrc,zsrc))

#  acoustic modeling
def modeling(sismo, snap, wav, sou, rec, vel, den, par, **kwargs):

    Flow([sismo, snap], [wav, vel, den,rec, sou],
         """awefd2d
            dabc=y verb=y snap=y fsrf=n cden=y
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            vel=${SOURCES[1]} den=${SOURCES[2]}
            rec=${SOURCES[3]} sou=${SOURCES[4]}
            wfl=${TARGETS[1]}"""%(par))

# Born (linearized) modeling
def born_modeling(sis_bkg, sis_sct, snap_bkg, snap_sct, wav, sou, rec, vel, den, ref, par, **kwargs):

    Flow([sis_bkg, sis_sct, snap_bkg, snap_sct], [wav, vel, den, ref, rec, sou],
         """lwefd2d
            dabc=y verb=y snap=y fsrf=n cden=y
            nb=%(nb)d jsnap=%(jsnap)d jdata=%(jdata)d
            vel=${SOURCES[1]} den=${SOURCES[2]} ref=${SOURCES[3]}
            rec=${SOURCES[4]} sou=${SOURCES[5]}
            lid=${TARGETS[1]} wfl=${TARGETS[2]} liw=${TARGETS[3]}"""%(par))

#plot snapshot
def snap_plot(snap, **kwargs):

    Result('plot-'+snap, snap,
           ''' put label1='Depth' label2='Distance'
               unit1='m' unit2='m' title="%s" |
               grey scalebar=y gainpanel=a'''%(snap))

#plot seismogram (shot)
def sismo_plot(sismo, perc=99.9):

    Result('plot-'+sismo, sismo,
           '''transp plane=12 |put title="%s"|
              grey pclip=%f gainpanel=e scalebar=y '''%(sismo,perc))

#plot model
def model_plot(model,title,bias=1500.):
    Result('plot-'+model,model,
           ''' grey pclip=100 gainpanel=e scalebar=y color=j
               allpos=y title=%s bias=%g '''%(title,bias))

## model parameters ##

# modeling parameters
par=dict(
    ot=0.0,
    nt=2000,
    dt=0.002,  # 1e-3
    nx=81,
    nz=81,
    nsp=1,     # number of spikes
    k1="61",
    k2="41",
    mag="1.",
    vel=1500.,
    jsnap=20,
    jdata=1,
    nb=40,
    fpeak=4.,
    oz=0.0,
    ox=0.0,
    dx=25.,
    dz=25.,
    lz='Depth',
    lx='Distance',
    uz='m',
    ux='m',
    srad=10,      # smooth radius
    nrec=81,      # number of receivers
    dr=25.,       # receiver interval (m)
    zr=25.,       # receiver depth (m)
    zsrc=1500.,     # source depth (m)
    dshot=25.,    # shot interval (m)
    nbuf=8,       # xcor buffer
    )
dl=1.2*sqrt(6)/PI/par['fpeak']
par['dpath']=dpath


# Create Layers
suffix='_NZ'+str(par['nz'])+'_NX'+str(par['nx'])

## make models
model='psf'
vp='vp_'+model+suffix
rho='rho_'+model+suffix
ref='ref_'+model+suffix

make_homog_model(vp,par['nz'],par['nx'],par['dz'],par['dx'],par['vel'],dpath)
make_homog_model(rho,par['nz'],par['nx'],par['dz'],par['dx'],1.,dpath)
make_spike_model(ref,par)

# model plot
model_plot(vp,"Vp",1500.)

## finite difference modeling
start  = int(ARGUMENTS.get('start_shot', '1')) # start shot
end    = int(ARGUMENTS.get('end_shot', '1')) # end shot
offset = float(ARGUMENTS.get('off', '1000.')) #afastamento do inicio do modelo
nexp=end-start+1

#strings to concatenate data
all_wavfile=''
all_sfile=''
all_rfile=''
all_shot=''

#shot position loop [start, end]
for j in range(start, end+1):

    #receiver line
    rfile='receivers_'+str(j)
    all_rfile=all_rfile+rfile+' '


    xsrc = offset + (j-1)*par['dshot']
    print xsrc
    oor = 0.; # spread-fixo

    rec_hline(rfile, oor, par['nrec'],
              par['dr'], par['zr'])

    #create wavelets
    wavfile='wavelet-'+str(j)
    create_ricker(wavfile, par,dl,0)
    plot_sig_spec(wavfile, 60, True)


    # Born Modeling
    # create sources positions
    sfile='source-born-'+str(j)
    point_src(sfile, xsrc, par['zr'])

    # creating registered data: shot-gather
    snap_bkg='snap-born-bkg-'+model+'-'+str(j)
    snap_sct='snap-born-sct-'+model+'-'+str(j)
    shot_bkg='shot-born-bkg-'+model+'-'+str(j)
    shot_sct='shot-born-sct-'+model+'-'+str(j)
    born_modeling(shot_bkg, shot_sct, snap_bkg, snap_sct, wavfile, sfile, rfile, vp, rho, ref, par)
    snap_plot(snap_bkg)
    snap_plot(snap_sct)
    sismo_plot(shot_sct)

    # Reciprocity Modeling
    # create sources positions
    sfile='source-recip-'+str(j)
    point_src(sfile, xsrc, par['zsrc'])

    # creating registered data: shot-gather
    shot='shot-recip-'+model+'-'+str(j)

    # source wavefield (z,x,t)
    snap='snap-recip-'+model+'-'+str(j)
    modeling(shot, snap, wavfile, sfile, rfile, vp, rho, par)
    snap_plot(snap)
    sismo_plot(shot)

    # Convolution of source trace with receiver traces
    trace='shot-recip-trace-'+str(j)
    Flow(trace, shot,'window n1=1 f1=40')

    # shot_conv='shot-recip-conv-'+model+'-'+str(j)
    # Flow(shot_conv, [shot,trace],"""transp | conv filt=${SOURCES[1]} trans=y |
    #                                 window n1=2000 | transp """)
    # sismo_plot(shot_conv)

    # Correction of Wavelet and Derivative
    trace_spray='shot-recip-trace-spray-'+str(j)
    wav_spray='wavelet-spray-'+str(j)

    Flow(trace_spray,trace,'''spray n=%(nrec)d d=%(dr)d o=o |
                              fft1'''%(par))

    Flow(wav_spray,wavfile,''' transp | spray n=%(nrec)d d=%(dr)d o=o |
                              fft1'''%(par))

    shot_conv='shot-recip-conv-'+model+'-'+str(j)
    Flow(shot_conv, [shot,trace_spray,wav_spray],
         """transp | fft1 | math s=${SOURCES[1]} w=${SOURCES[2]}
            output="x1^2*input*s*conj(w)/(w*conj(w)+0.001)" |
            fft1 inv=y |  transp """)
    sismo_plot(shot_conv)

End()
